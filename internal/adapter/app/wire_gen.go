// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"management/internal/adapter/management/paseto"
	"management/internal/adapter/config"
	"management/internal/adapter/storage/postgres"
	http2 "management/internal/adapter/transport/http"
	"management/internal/core/port/management"
	"management/internal/core/port/db"
	"management/internal/core/port/http"
	"management/internal/core/port/user"
	"management/internal/core/service"
	"context"
	"go.uber.org/zap"
	"sync"
)

// Injectors from wire.go:

func InitApp(ctx context.Context, wg *sync.WaitGroup, rw *sync.RWMutex, Cfg *config.Container) (*App, func(), error) {
	postgresEngineMaker, cleanup, err := dbEngineFunc(ctx, Cfg)
	if err != nil {
		return nil, nil, err
	}
	userRepositoryPort := psql.NewUserRepository(postgresEngineMaker)
	tokenMaker, err := paseto.NewPaseto(Cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userServicePort := service.NewUserService(userRepositoryPort, tokenMaker)
	serverMaker, cleanup2, err := httpServerFunc(ctx, Cfg, userServicePort, tokenMaker)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := New(rw, Cfg, serverMaker, tokenMaker, postgresEngineMaker, userRepositoryPort, userServicePort)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func dbEngineFunc(
	ctx context.Context,
	Cfg *config.Container) (db.PostgresEngineMaker, func(), error) {
	psqlDb := psql.NewDB(Cfg)
	err := psqlDb.Start(ctx)
	if err != nil {
		zap.S().Fatal("failed to start db:", err)
	}

	if err != nil {
		zap.S().Fatal("failed to migrate db:", err)
	}
	return psqlDb, func() { psqlDb.Close(ctx) }, nil
}

func httpServerFunc(
	ctx context.Context,
	Cfg *config.Container,
	UserService user.UserServicePort,
	tokenMaker management.TokenMaker,
) (http.ServerMaker, func(), error) {
	httpServer := http2.NewHTTPServer(ctx, Cfg, UserService, tokenMaker)
	err := httpServer.Start(ctx)
	if err != nil {
		return nil, nil, err
	}
	return httpServer, func() { httpServer.Close(ctx) }, nil
}
